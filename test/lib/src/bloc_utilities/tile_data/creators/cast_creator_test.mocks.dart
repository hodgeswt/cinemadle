// Mocks generated by Mockito 5.4.4 from annotations
// in cinemadle/test/lib/src/bloc_utilities/tile_data/creators/cast_creator_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tmdb_repository/tmdb_repository.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMovie_0 extends _i1.SmartFake implements _i2.Movie {
  _FakeMovie_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TmdbRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTmdbRepository extends _i1.Mock implements _i2.TmdbRepository {
  @override
  _i3.Future<List<_i2.SearchResult>> search(
    String? text,
    List<int>? blacklist, {
    bool? preventRecurse = false,
    int? page = 1,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #search,
          [
            text,
            blacklist,
          ],
          {
            #preventRecurse: preventRecurse,
            #page: page,
          },
        ),
        returnValue:
            _i3.Future<List<_i2.SearchResult>>.value(<_i2.SearchResult>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i2.SearchResult>>.value(<_i2.SearchResult>[]),
      ) as _i3.Future<List<_i2.SearchResult>>);

  @override
  _i3.Future<_i2.Movie> getMovieFromPage(
    int? page,
    int? index,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieFromPage,
          [
            page,
            index,
          ],
        ),
        returnValue: _i3.Future<_i2.Movie>.value(_FakeMovie_0(
          this,
          Invocation.method(
            #getMovieFromPage,
            [
              page,
              index,
            ],
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.Movie>.value(_FakeMovie_0(
          this,
          Invocation.method(
            #getMovieFromPage,
            [
              page,
              index,
            ],
          ),
        )),
      ) as _i3.Future<_i2.Movie>);

  @override
  _i3.Future<_i2.Movie> getMovie(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getMovie,
          [id],
        ),
        returnValue: _i3.Future<_i2.Movie>.value(_FakeMovie_0(
          this,
          Invocation.method(
            #getMovie,
            [id],
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.Movie>.value(_FakeMovie_0(
          this,
          Invocation.method(
            #getMovie,
            [id],
          ),
        )),
      ) as _i3.Future<_i2.Movie>);

  @override
  _i3.Future<bool> isActorInMovie(
    String? actor,
    int? id,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isActorInMovie,
          [
            actor,
            id,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
